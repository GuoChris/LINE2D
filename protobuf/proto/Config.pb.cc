// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rl2d {

namespace {

const ::google::protobuf::Descriptor* ObjectConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectConfig_ImageDirAndPoseFilePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfig_ImageDirAndPoseFilePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectConfig_OnlineRenderingParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfig_OnlineRenderingParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectConfig_RGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfig_RGB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectsConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectsConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraIntrinsic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraIntrinsic_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Config_2eproto() {
  protobuf_AddDesc_Config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Config.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectConfig_descriptor_ = file->message_type(0);
  static const int ObjectConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, model_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, imagedir_posefile_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, color_hist_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, online_rendering_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, bounding_box_color_),
  };
  ObjectConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfig_descriptor_,
      ObjectConfig::default_instance_,
      ObjectConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfig));
  ObjectConfig_ImageDirAndPoseFilePair_descriptor_ = ObjectConfig_descriptor_->nested_type(0);
  static const int ObjectConfig_ImageDirAndPoseFilePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_ImageDirAndPoseFilePair, img_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_ImageDirAndPoseFilePair, pose_path_),
  };
  ObjectConfig_ImageDirAndPoseFilePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfig_ImageDirAndPoseFilePair_descriptor_,
      ObjectConfig_ImageDirAndPoseFilePair::default_instance_,
      ObjectConfig_ImageDirAndPoseFilePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_ImageDirAndPoseFilePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_ImageDirAndPoseFilePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfig_ImageDirAndPoseFilePair));
  ObjectConfig_OnlineRenderingParams_descriptor_ = ObjectConfig_descriptor_->nested_type(1);
  static const int ObjectConfig_OnlineRenderingParams_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, min_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, max_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, radius_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, min_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, max_latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, latitude_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, min_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, max_longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, longitude_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, min_inplane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, max_inplane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, inplane_step_),
  };
  ObjectConfig_OnlineRenderingParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfig_OnlineRenderingParams_descriptor_,
      ObjectConfig_OnlineRenderingParams::default_instance_,
      ObjectConfig_OnlineRenderingParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_OnlineRenderingParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfig_OnlineRenderingParams));
  ObjectConfig_RGB_descriptor_ = ObjectConfig_descriptor_->nested_type(2);
  static const int ObjectConfig_RGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, b_),
  };
  ObjectConfig_RGB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfig_RGB_descriptor_,
      ObjectConfig_RGB::default_instance_,
      ObjectConfig_RGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfig_RGB));
  ObjectsConfig_descriptor_ = file->message_type(1);
  static const int ObjectsConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectsConfig, object_config_),
  };
  ObjectsConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectsConfig_descriptor_,
      ObjectsConfig::default_instance_,
      ObjectsConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectsConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectsConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectsConfig));
  CameraIntrinsic_descriptor_ = file->message_type(2);
  static const int CameraIntrinsic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, cy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, distortions_),
  };
  CameraIntrinsic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraIntrinsic_descriptor_,
      CameraIntrinsic::default_instance_,
      CameraIntrinsic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraIntrinsic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraIntrinsic));
  DetectorConfig_descriptor_ = file->message_type(3);
  static const int DetectorConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorConfig, match_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorConfig, steps_each_pyramid_),
  };
  DetectorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorConfig_descriptor_,
      DetectorConfig::default_instance_,
      DetectorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfig_descriptor_, &ObjectConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfig_ImageDirAndPoseFilePair_descriptor_, &ObjectConfig_ImageDirAndPoseFilePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfig_OnlineRenderingParams_descriptor_, &ObjectConfig_OnlineRenderingParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfig_RGB_descriptor_, &ObjectConfig_RGB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectsConfig_descriptor_, &ObjectsConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraIntrinsic_descriptor_, &CameraIntrinsic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorConfig_descriptor_, &DetectorConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Config_2eproto() {
  delete ObjectConfig::default_instance_;
  delete ObjectConfig_reflection_;
  delete ObjectConfig_ImageDirAndPoseFilePair::default_instance_;
  delete ObjectConfig_ImageDirAndPoseFilePair_reflection_;
  delete ObjectConfig_OnlineRenderingParams::default_instance_;
  delete ObjectConfig_OnlineRenderingParams_reflection_;
  delete ObjectConfig_RGB::default_instance_;
  delete ObjectConfig_RGB_reflection_;
  delete ObjectsConfig::default_instance_;
  delete ObjectsConfig_reflection_;
  delete CameraIntrinsic::default_instance_;
  delete CameraIntrinsic_reflection_;
  delete DetectorConfig::default_instance_;
  delete DetectorConfig_reflection_;
}

void protobuf_AddDesc_Config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Config.proto\022\004rl2d\"\261\005\n\014ObjectConfig\022\n\n"
    "\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\022\n\nmodel_path\030\005 "
    "\001(\t\022J\n\026imageDir_poseFile_pair\030\003 \003(\0132*.rl"
    "2d.ObjectConfig.ImageDirAndPoseFilePair\022"
    "\026\n\016color_hist_dir\030\004 \003(\t\022I\n\027online_render"
    "ing_params\030\006 \001(\0132(.rl2d.ObjectConfig.Onl"
    "ineRenderingParams\0222\n\022bounding_box_color"
    "\030\007 \001(\0132\026.rl2d.ObjectConfig.RGB\032=\n\027ImageD"
    "irAndPoseFilePair\022\017\n\007img_dir\030\001 \002(\t\022\021\n\tpo"
    "se_path\030\002 \002(\t\032\235\002\n\025OnlineRenderingParams\022"
    "\022\n\nmin_radius\030\001 \002(\002\022\022\n\nmax_radius\030\002 \002(\002\022"
    "\023\n\013radius_step\030\003 \002(\002\022\024\n\014min_latitude\030\004 \002"
    "(\002\022\024\n\014max_latitude\030\005 \002(\002\022\025\n\rlatitude_ste"
    "p\030\006 \002(\002\022\025\n\rmin_longitude\030\007 \002(\002\022\025\n\rmax_lo"
    "ngitude\030\010 \002(\002\022\026\n\016longitude_step\030\t \002(\002\022\023\n"
    "\013min_inplane\030\n \002(\002\022\023\n\013max_inplane\030\013 \002(\002\022"
    "\024\n\014inplane_step\030\014 \002(\002\0321\n\003RGB\022\016\n\001R\030\001 \001(\005:"
    "\003255\022\014\n\001G\030\002 \001(\005:\0010\022\014\n\001B\030\003 \001(\005:\0010\":\n\rObje"
    "ctsConfig\022)\n\robject_config\030\001 \003(\0132\022.rl2d."
    "ObjectConfig\"Z\n\017CameraIntrinsic\022\n\n\002fx\030\001 "
    "\002(\002\022\n\n\002fy\030\002 \002(\002\022\n\n\002cx\030\003 \002(\002\022\n\n\002cy\030\004 \002(\002\022"
    "\027\n\013distortions\030\005 \003(\002B\002\020\001\"I\n\016DetectorConf"
    "ig\022\027\n\017match_threshold\030\001 \002(\002\022\036\n\022steps_eac"
    "h_pyramid\030\002 \003(\002B\002\020\001", 939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Config.proto", &protobuf_RegisterTypes);
  ObjectConfig::default_instance_ = new ObjectConfig();
  ObjectConfig_ImageDirAndPoseFilePair::default_instance_ = new ObjectConfig_ImageDirAndPoseFilePair();
  ObjectConfig_OnlineRenderingParams::default_instance_ = new ObjectConfig_OnlineRenderingParams();
  ObjectConfig_RGB::default_instance_ = new ObjectConfig_RGB();
  ObjectsConfig::default_instance_ = new ObjectsConfig();
  CameraIntrinsic::default_instance_ = new CameraIntrinsic();
  DetectorConfig::default_instance_ = new DetectorConfig();
  ObjectConfig::default_instance_->InitAsDefaultInstance();
  ObjectConfig_ImageDirAndPoseFilePair::default_instance_->InitAsDefaultInstance();
  ObjectConfig_OnlineRenderingParams::default_instance_->InitAsDefaultInstance();
  ObjectConfig_RGB::default_instance_->InitAsDefaultInstance();
  ObjectsConfig::default_instance_->InitAsDefaultInstance();
  CameraIntrinsic::default_instance_->InitAsDefaultInstance();
  DetectorConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Config_2eproto {
  StaticDescriptorInitializer_Config_2eproto() {
    protobuf_AddDesc_Config_2eproto();
  }
} static_descriptor_initializer_Config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ObjectConfig_ImageDirAndPoseFilePair::kImgDirFieldNumber;
const int ObjectConfig_ImageDirAndPoseFilePair::kPosePathFieldNumber;
#endif  // !_MSC_VER

ObjectConfig_ImageDirAndPoseFilePair::ObjectConfig_ImageDirAndPoseFilePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectConfig_ImageDirAndPoseFilePair::InitAsDefaultInstance() {
}

ObjectConfig_ImageDirAndPoseFilePair::ObjectConfig_ImageDirAndPoseFilePair(const ObjectConfig_ImageDirAndPoseFilePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectConfig_ImageDirAndPoseFilePair::SharedCtor() {
  _cached_size_ = 0;
  img_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pose_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfig_ImageDirAndPoseFilePair::~ObjectConfig_ImageDirAndPoseFilePair() {
  SharedDtor();
}

void ObjectConfig_ImageDirAndPoseFilePair::SharedDtor() {
  if (img_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete img_dir_;
  }
  if (pose_path_ != &::google::protobuf::internal::kEmptyString) {
    delete pose_path_;
  }
  if (this != default_instance_) {
  }
}

void ObjectConfig_ImageDirAndPoseFilePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfig_ImageDirAndPoseFilePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfig_ImageDirAndPoseFilePair_descriptor_;
}

const ObjectConfig_ImageDirAndPoseFilePair& ObjectConfig_ImageDirAndPoseFilePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectConfig_ImageDirAndPoseFilePair* ObjectConfig_ImageDirAndPoseFilePair::default_instance_ = NULL;

ObjectConfig_ImageDirAndPoseFilePair* ObjectConfig_ImageDirAndPoseFilePair::New() const {
  return new ObjectConfig_ImageDirAndPoseFilePair;
}

void ObjectConfig_ImageDirAndPoseFilePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_img_dir()) {
      if (img_dir_ != &::google::protobuf::internal::kEmptyString) {
        img_dir_->clear();
      }
    }
    if (has_pose_path()) {
      if (pose_path_ != &::google::protobuf::internal::kEmptyString) {
        pose_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfig_ImageDirAndPoseFilePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string img_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_dir().data(), this->img_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pose_path;
        break;
      }

      // required string pose_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pose_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pose_path().data(), this->pose_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectConfig_ImageDirAndPoseFilePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string img_dir = 1;
  if (has_img_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_dir().data(), this->img_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->img_dir(), output);
  }

  // required string pose_path = 2;
  if (has_pose_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pose_path().data(), this->pose_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pose_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectConfig_ImageDirAndPoseFilePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string img_dir = 1;
  if (has_img_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_dir().data(), this->img_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->img_dir(), target);
  }

  // required string pose_path = 2;
  if (has_pose_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pose_path().data(), this->pose_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pose_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectConfig_ImageDirAndPoseFilePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string img_dir = 1;
    if (has_img_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_dir());
    }

    // required string pose_path = 2;
    if (has_pose_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pose_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfig_ImageDirAndPoseFilePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfig_ImageDirAndPoseFilePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfig_ImageDirAndPoseFilePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfig_ImageDirAndPoseFilePair::MergeFrom(const ObjectConfig_ImageDirAndPoseFilePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_dir()) {
      set_img_dir(from.img_dir());
    }
    if (from.has_pose_path()) {
      set_pose_path(from.pose_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfig_ImageDirAndPoseFilePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfig_ImageDirAndPoseFilePair::CopyFrom(const ObjectConfig_ImageDirAndPoseFilePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfig_ImageDirAndPoseFilePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ObjectConfig_ImageDirAndPoseFilePair::Swap(ObjectConfig_ImageDirAndPoseFilePair* other) {
  if (other != this) {
    std::swap(img_dir_, other->img_dir_);
    std::swap(pose_path_, other->pose_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfig_ImageDirAndPoseFilePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfig_ImageDirAndPoseFilePair_descriptor_;
  metadata.reflection = ObjectConfig_ImageDirAndPoseFilePair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ObjectConfig_OnlineRenderingParams::kMinRadiusFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMaxRadiusFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kRadiusStepFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMinLatitudeFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMaxLatitudeFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kLatitudeStepFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMinLongitudeFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMaxLongitudeFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kLongitudeStepFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMinInplaneFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kMaxInplaneFieldNumber;
const int ObjectConfig_OnlineRenderingParams::kInplaneStepFieldNumber;
#endif  // !_MSC_VER

ObjectConfig_OnlineRenderingParams::ObjectConfig_OnlineRenderingParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectConfig_OnlineRenderingParams::InitAsDefaultInstance() {
}

ObjectConfig_OnlineRenderingParams::ObjectConfig_OnlineRenderingParams(const ObjectConfig_OnlineRenderingParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectConfig_OnlineRenderingParams::SharedCtor() {
  _cached_size_ = 0;
  min_radius_ = 0;
  max_radius_ = 0;
  radius_step_ = 0;
  min_latitude_ = 0;
  max_latitude_ = 0;
  latitude_step_ = 0;
  min_longitude_ = 0;
  max_longitude_ = 0;
  longitude_step_ = 0;
  min_inplane_ = 0;
  max_inplane_ = 0;
  inplane_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfig_OnlineRenderingParams::~ObjectConfig_OnlineRenderingParams() {
  SharedDtor();
}

void ObjectConfig_OnlineRenderingParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectConfig_OnlineRenderingParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfig_OnlineRenderingParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfig_OnlineRenderingParams_descriptor_;
}

const ObjectConfig_OnlineRenderingParams& ObjectConfig_OnlineRenderingParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectConfig_OnlineRenderingParams* ObjectConfig_OnlineRenderingParams::default_instance_ = NULL;

ObjectConfig_OnlineRenderingParams* ObjectConfig_OnlineRenderingParams::New() const {
  return new ObjectConfig_OnlineRenderingParams;
}

void ObjectConfig_OnlineRenderingParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_radius_ = 0;
    max_radius_ = 0;
    radius_step_ = 0;
    min_latitude_ = 0;
    max_latitude_ = 0;
    latitude_step_ = 0;
    min_longitude_ = 0;
    max_longitude_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    longitude_step_ = 0;
    min_inplane_ = 0;
    max_inplane_ = 0;
    inplane_step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfig_OnlineRenderingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float min_radius = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_radius_)));
          set_has_min_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_max_radius;
        break;
      }

      // required float max_radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_radius_)));
          set_has_max_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_radius_step;
        break;
      }

      // required float radius_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_step_)));
          set_has_radius_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_min_latitude;
        break;
      }

      // required float min_latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_latitude_)));
          set_has_min_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_max_latitude;
        break;
      }

      // required float max_latitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_latitude_)));
          set_has_max_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_latitude_step;
        break;
      }

      // required float latitude_step = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_step_)));
          set_has_latitude_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_min_longitude;
        break;
      }

      // required float min_longitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_longitude_)));
          set_has_min_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_max_longitude;
        break;
      }

      // required float max_longitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_longitude_)));
          set_has_max_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_longitude_step;
        break;
      }

      // required float longitude_step = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_step_)));
          set_has_longitude_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_min_inplane;
        break;
      }

      // required float min_inplane = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_inplane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_inplane_)));
          set_has_min_inplane();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_max_inplane;
        break;
      }

      // required float max_inplane = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_inplane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_inplane_)));
          set_has_max_inplane();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_inplane_step;
        break;
      }

      // required float inplane_step = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inplane_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inplane_step_)));
          set_has_inplane_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectConfig_OnlineRenderingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float min_radius = 1;
  if (has_min_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_radius(), output);
  }

  // required float max_radius = 2;
  if (has_max_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_radius(), output);
  }

  // required float radius_step = 3;
  if (has_radius_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius_step(), output);
  }

  // required float min_latitude = 4;
  if (has_min_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_latitude(), output);
  }

  // required float max_latitude = 5;
  if (has_max_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_latitude(), output);
  }

  // required float latitude_step = 6;
  if (has_latitude_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->latitude_step(), output);
  }

  // required float min_longitude = 7;
  if (has_min_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->min_longitude(), output);
  }

  // required float max_longitude = 8;
  if (has_max_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_longitude(), output);
  }

  // required float longitude_step = 9;
  if (has_longitude_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->longitude_step(), output);
  }

  // required float min_inplane = 10;
  if (has_min_inplane()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->min_inplane(), output);
  }

  // required float max_inplane = 11;
  if (has_max_inplane()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->max_inplane(), output);
  }

  // required float inplane_step = 12;
  if (has_inplane_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->inplane_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectConfig_OnlineRenderingParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float min_radius = 1;
  if (has_min_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_radius(), target);
  }

  // required float max_radius = 2;
  if (has_max_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_radius(), target);
  }

  // required float radius_step = 3;
  if (has_radius_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius_step(), target);
  }

  // required float min_latitude = 4;
  if (has_min_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_latitude(), target);
  }

  // required float max_latitude = 5;
  if (has_max_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_latitude(), target);
  }

  // required float latitude_step = 6;
  if (has_latitude_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->latitude_step(), target);
  }

  // required float min_longitude = 7;
  if (has_min_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->min_longitude(), target);
  }

  // required float max_longitude = 8;
  if (has_max_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_longitude(), target);
  }

  // required float longitude_step = 9;
  if (has_longitude_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->longitude_step(), target);
  }

  // required float min_inplane = 10;
  if (has_min_inplane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->min_inplane(), target);
  }

  // required float max_inplane = 11;
  if (has_max_inplane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->max_inplane(), target);
  }

  // required float inplane_step = 12;
  if (has_inplane_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->inplane_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectConfig_OnlineRenderingParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float min_radius = 1;
    if (has_min_radius()) {
      total_size += 1 + 4;
    }

    // required float max_radius = 2;
    if (has_max_radius()) {
      total_size += 1 + 4;
    }

    // required float radius_step = 3;
    if (has_radius_step()) {
      total_size += 1 + 4;
    }

    // required float min_latitude = 4;
    if (has_min_latitude()) {
      total_size += 1 + 4;
    }

    // required float max_latitude = 5;
    if (has_max_latitude()) {
      total_size += 1 + 4;
    }

    // required float latitude_step = 6;
    if (has_latitude_step()) {
      total_size += 1 + 4;
    }

    // required float min_longitude = 7;
    if (has_min_longitude()) {
      total_size += 1 + 4;
    }

    // required float max_longitude = 8;
    if (has_max_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float longitude_step = 9;
    if (has_longitude_step()) {
      total_size += 1 + 4;
    }

    // required float min_inplane = 10;
    if (has_min_inplane()) {
      total_size += 1 + 4;
    }

    // required float max_inplane = 11;
    if (has_max_inplane()) {
      total_size += 1 + 4;
    }

    // required float inplane_step = 12;
    if (has_inplane_step()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfig_OnlineRenderingParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfig_OnlineRenderingParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfig_OnlineRenderingParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfig_OnlineRenderingParams::MergeFrom(const ObjectConfig_OnlineRenderingParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_radius()) {
      set_min_radius(from.min_radius());
    }
    if (from.has_max_radius()) {
      set_max_radius(from.max_radius());
    }
    if (from.has_radius_step()) {
      set_radius_step(from.radius_step());
    }
    if (from.has_min_latitude()) {
      set_min_latitude(from.min_latitude());
    }
    if (from.has_max_latitude()) {
      set_max_latitude(from.max_latitude());
    }
    if (from.has_latitude_step()) {
      set_latitude_step(from.latitude_step());
    }
    if (from.has_min_longitude()) {
      set_min_longitude(from.min_longitude());
    }
    if (from.has_max_longitude()) {
      set_max_longitude(from.max_longitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_longitude_step()) {
      set_longitude_step(from.longitude_step());
    }
    if (from.has_min_inplane()) {
      set_min_inplane(from.min_inplane());
    }
    if (from.has_max_inplane()) {
      set_max_inplane(from.max_inplane());
    }
    if (from.has_inplane_step()) {
      set_inplane_step(from.inplane_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfig_OnlineRenderingParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfig_OnlineRenderingParams::CopyFrom(const ObjectConfig_OnlineRenderingParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfig_OnlineRenderingParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void ObjectConfig_OnlineRenderingParams::Swap(ObjectConfig_OnlineRenderingParams* other) {
  if (other != this) {
    std::swap(min_radius_, other->min_radius_);
    std::swap(max_radius_, other->max_radius_);
    std::swap(radius_step_, other->radius_step_);
    std::swap(min_latitude_, other->min_latitude_);
    std::swap(max_latitude_, other->max_latitude_);
    std::swap(latitude_step_, other->latitude_step_);
    std::swap(min_longitude_, other->min_longitude_);
    std::swap(max_longitude_, other->max_longitude_);
    std::swap(longitude_step_, other->longitude_step_);
    std::swap(min_inplane_, other->min_inplane_);
    std::swap(max_inplane_, other->max_inplane_);
    std::swap(inplane_step_, other->inplane_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfig_OnlineRenderingParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfig_OnlineRenderingParams_descriptor_;
  metadata.reflection = ObjectConfig_OnlineRenderingParams_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ObjectConfig_RGB::kRFieldNumber;
const int ObjectConfig_RGB::kGFieldNumber;
const int ObjectConfig_RGB::kBFieldNumber;
#endif  // !_MSC_VER

ObjectConfig_RGB::ObjectConfig_RGB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectConfig_RGB::InitAsDefaultInstance() {
}

ObjectConfig_RGB::ObjectConfig_RGB(const ObjectConfig_RGB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectConfig_RGB::SharedCtor() {
  _cached_size_ = 0;
  r_ = 255;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfig_RGB::~ObjectConfig_RGB() {
  SharedDtor();
}

void ObjectConfig_RGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectConfig_RGB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfig_RGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfig_RGB_descriptor_;
}

const ObjectConfig_RGB& ObjectConfig_RGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectConfig_RGB* ObjectConfig_RGB::default_instance_ = NULL;

ObjectConfig_RGB* ObjectConfig_RGB::New() const {
  return new ObjectConfig_RGB;
}

void ObjectConfig_RGB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 255;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfig_RGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 R = 1 [default = 255];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_G;
        break;
      }

      // optional int32 G = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_B;
        break;
      }

      // optional int32 B = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectConfig_RGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 R = 1 [default = 255];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 G = 2 [default = 0];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 B = 3 [default = 0];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectConfig_RGB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 R = 1 [default = 255];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // optional int32 G = 2 [default = 0];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // optional int32 B = 3 [default = 0];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectConfig_RGB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 R = 1 [default = 255];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 G = 2 [default = 0];
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // optional int32 B = 3 [default = 0];
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfig_RGB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfig_RGB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfig_RGB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfig_RGB::MergeFrom(const ObjectConfig_RGB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfig_RGB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfig_RGB::CopyFrom(const ObjectConfig_RGB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfig_RGB::IsInitialized() const {

  return true;
}

void ObjectConfig_RGB::Swap(ObjectConfig_RGB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfig_RGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfig_RGB_descriptor_;
  metadata.reflection = ObjectConfig_RGB_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ObjectConfig::kIdFieldNumber;
const int ObjectConfig::kNameFieldNumber;
const int ObjectConfig::kModelPathFieldNumber;
const int ObjectConfig::kImageDirPoseFilePairFieldNumber;
const int ObjectConfig::kColorHistDirFieldNumber;
const int ObjectConfig::kOnlineRenderingParamsFieldNumber;
const int ObjectConfig::kBoundingBoxColorFieldNumber;
#endif  // !_MSC_VER

ObjectConfig::ObjectConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectConfig::InitAsDefaultInstance() {
  online_rendering_params_ = const_cast< ::rl2d::ObjectConfig_OnlineRenderingParams*>(&::rl2d::ObjectConfig_OnlineRenderingParams::default_instance());
  bounding_box_color_ = const_cast< ::rl2d::ObjectConfig_RGB*>(&::rl2d::ObjectConfig_RGB::default_instance());
}

ObjectConfig::ObjectConfig(const ObjectConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_rendering_params_ = NULL;
  bounding_box_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfig::~ObjectConfig() {
  SharedDtor();
}

void ObjectConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (model_path_ != &::google::protobuf::internal::kEmptyString) {
    delete model_path_;
  }
  if (this != default_instance_) {
    delete online_rendering_params_;
    delete bounding_box_color_;
  }
}

void ObjectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfig_descriptor_;
}

const ObjectConfig& ObjectConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectConfig* ObjectConfig::default_instance_ = NULL;

ObjectConfig* ObjectConfig::New() const {
  return new ObjectConfig;
}

void ObjectConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_model_path()) {
      if (model_path_ != &::google::protobuf::internal::kEmptyString) {
        model_path_->clear();
      }
    }
    if (has_online_rendering_params()) {
      if (online_rendering_params_ != NULL) online_rendering_params_->::rl2d::ObjectConfig_OnlineRenderingParams::Clear();
    }
    if (has_bounding_box_color()) {
      if (bounding_box_color_ != NULL) bounding_box_color_->::rl2d::ObjectConfig_RGB::Clear();
    }
  }
  imagedir_posefile_pair_.Clear();
  color_hist_dir_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imageDir_poseFile_pair;
        break;
      }

      // repeated .rl2d.ObjectConfig.ImageDirAndPoseFilePair imageDir_poseFile_pair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageDir_poseFile_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imagedir_posefile_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imageDir_poseFile_pair;
        if (input->ExpectTag(34)) goto parse_color_hist_dir;
        break;
      }

      // repeated string color_hist_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color_hist_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_color_hist_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color_hist_dir(this->color_hist_dir_size() - 1).data(),
            this->color_hist_dir(this->color_hist_dir_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_color_hist_dir;
        if (input->ExpectTag(42)) goto parse_model_path;
        break;
      }

      // optional string model_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_path().data(), this->model_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_online_rendering_params;
        break;
      }

      // optional .rl2d.ObjectConfig.OnlineRenderingParams online_rendering_params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_rendering_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_rendering_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bounding_box_color;
        break;
      }

      // optional .rl2d.ObjectConfig.RGB bounding_box_color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounding_box_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .rl2d.ObjectConfig.ImageDirAndPoseFilePair imageDir_poseFile_pair = 3;
  for (int i = 0; i < this->imagedir_posefile_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imagedir_posefile_pair(i), output);
  }

  // repeated string color_hist_dir = 4;
  for (int i = 0; i < this->color_hist_dir_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->color_hist_dir(i).data(), this->color_hist_dir(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->color_hist_dir(i), output);
  }

  // optional string model_path = 5;
  if (has_model_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->model_path(), output);
  }

  // optional .rl2d.ObjectConfig.OnlineRenderingParams online_rendering_params = 6;
  if (has_online_rendering_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->online_rendering_params(), output);
  }

  // optional .rl2d.ObjectConfig.RGB bounding_box_color = 7;
  if (has_bounding_box_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bounding_box_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .rl2d.ObjectConfig.ImageDirAndPoseFilePair imageDir_poseFile_pair = 3;
  for (int i = 0; i < this->imagedir_posefile_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->imagedir_posefile_pair(i), target);
  }

  // repeated string color_hist_dir = 4;
  for (int i = 0; i < this->color_hist_dir_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color_hist_dir(i).data(), this->color_hist_dir(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->color_hist_dir(i), target);
  }

  // optional string model_path = 5;
  if (has_model_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model_path(), target);
  }

  // optional .rl2d.ObjectConfig.OnlineRenderingParams online_rendering_params = 6;
  if (has_online_rendering_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->online_rendering_params(), target);
  }

  // optional .rl2d.ObjectConfig.RGB bounding_box_color = 7;
  if (has_bounding_box_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bounding_box_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string model_path = 5;
    if (has_model_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_path());
    }

    // optional .rl2d.ObjectConfig.OnlineRenderingParams online_rendering_params = 6;
    if (has_online_rendering_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_rendering_params());
    }

    // optional .rl2d.ObjectConfig.RGB bounding_box_color = 7;
    if (has_bounding_box_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_box_color());
    }

  }
  // repeated .rl2d.ObjectConfig.ImageDirAndPoseFilePair imageDir_poseFile_pair = 3;
  total_size += 1 * this->imagedir_posefile_pair_size();
  for (int i = 0; i < this->imagedir_posefile_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imagedir_posefile_pair(i));
  }

  // repeated string color_hist_dir = 4;
  total_size += 1 * this->color_hist_dir_size();
  for (int i = 0; i < this->color_hist_dir_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->color_hist_dir(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfig::MergeFrom(const ObjectConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  imagedir_posefile_pair_.MergeFrom(from.imagedir_posefile_pair_);
  color_hist_dir_.MergeFrom(from.color_hist_dir_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model_path()) {
      set_model_path(from.model_path());
    }
    if (from.has_online_rendering_params()) {
      mutable_online_rendering_params()->::rl2d::ObjectConfig_OnlineRenderingParams::MergeFrom(from.online_rendering_params());
    }
    if (from.has_bounding_box_color()) {
      mutable_bounding_box_color()->::rl2d::ObjectConfig_RGB::MergeFrom(from.bounding_box_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfig::CopyFrom(const ObjectConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < imagedir_posefile_pair_size(); i++) {
    if (!this->imagedir_posefile_pair(i).IsInitialized()) return false;
  }
  if (has_online_rendering_params()) {
    if (!this->online_rendering_params().IsInitialized()) return false;
  }
  return true;
}

void ObjectConfig::Swap(ObjectConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(model_path_, other->model_path_);
    imagedir_posefile_pair_.Swap(&other->imagedir_posefile_pair_);
    color_hist_dir_.Swap(&other->color_hist_dir_);
    std::swap(online_rendering_params_, other->online_rendering_params_);
    std::swap(bounding_box_color_, other->bounding_box_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfig_descriptor_;
  metadata.reflection = ObjectConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectsConfig::kObjectConfigFieldNumber;
#endif  // !_MSC_VER

ObjectsConfig::ObjectsConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectsConfig::InitAsDefaultInstance() {
}

ObjectsConfig::ObjectsConfig(const ObjectsConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectsConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectsConfig::~ObjectsConfig() {
  SharedDtor();
}

void ObjectsConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectsConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectsConfig_descriptor_;
}

const ObjectsConfig& ObjectsConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectsConfig* ObjectsConfig::default_instance_ = NULL;

ObjectsConfig* ObjectsConfig::New() const {
  return new ObjectsConfig;
}

void ObjectsConfig::Clear() {
  object_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rl2d.ObjectConfig object_config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object_config;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rl2d.ObjectConfig object_config = 1;
  for (int i = 0; i < this->object_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_config(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectsConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rl2d.ObjectConfig object_config = 1;
  for (int i = 0; i < this->object_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_config(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectsConfig::ByteSize() const {
  int total_size = 0;

  // repeated .rl2d.ObjectConfig object_config = 1;
  total_size += 1 * this->object_config_size();
  for (int i = 0; i < this->object_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_config(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectsConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectsConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectsConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectsConfig::MergeFrom(const ObjectsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_config_.MergeFrom(from.object_config_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectsConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectsConfig::CopyFrom(const ObjectsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectsConfig::IsInitialized() const {

  for (int i = 0; i < object_config_size(); i++) {
    if (!this->object_config(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectsConfig::Swap(ObjectsConfig* other) {
  if (other != this) {
    object_config_.Swap(&other->object_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectsConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectsConfig_descriptor_;
  metadata.reflection = ObjectsConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraIntrinsic::kFxFieldNumber;
const int CameraIntrinsic::kFyFieldNumber;
const int CameraIntrinsic::kCxFieldNumber;
const int CameraIntrinsic::kCyFieldNumber;
const int CameraIntrinsic::kDistortionsFieldNumber;
#endif  // !_MSC_VER

CameraIntrinsic::CameraIntrinsic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraIntrinsic::InitAsDefaultInstance() {
}

CameraIntrinsic::CameraIntrinsic(const CameraIntrinsic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraIntrinsic::SharedCtor() {
  _cached_size_ = 0;
  fx_ = 0;
  fy_ = 0;
  cx_ = 0;
  cy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraIntrinsic::~CameraIntrinsic() {
  SharedDtor();
}

void CameraIntrinsic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraIntrinsic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraIntrinsic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraIntrinsic_descriptor_;
}

const CameraIntrinsic& CameraIntrinsic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

CameraIntrinsic* CameraIntrinsic::default_instance_ = NULL;

CameraIntrinsic* CameraIntrinsic::New() const {
  return new CameraIntrinsic;
}

void CameraIntrinsic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fx_ = 0;
    fy_ = 0;
    cx_ = 0;
    cy_ = 0;
  }
  distortions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraIntrinsic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float fx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_)));
          set_has_fx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fy;
        break;
      }

      // required float fy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fy_)));
          set_has_fy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_cx;
        break;
      }

      // required float cx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_cy;
        break;
      }

      // required float cy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cy_)));
          set_has_cy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_distortions;
        break;
      }

      // repeated float distortions = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distortions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_distortions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_distortions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraIntrinsic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float fx = 1;
  if (has_fx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fx(), output);
  }

  // required float fy = 2;
  if (has_fy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fy(), output);
  }

  // required float cx = 3;
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cx(), output);
  }

  // required float cy = 4;
  if (has_cy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cy(), output);
  }

  // repeated float distortions = 5 [packed = true];
  if (this->distortions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_distortions_cached_byte_size_);
  }
  for (int i = 0; i < this->distortions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->distortions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraIntrinsic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float fx = 1;
  if (has_fx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fx(), target);
  }

  // required float fy = 2;
  if (has_fy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fy(), target);
  }

  // required float cx = 3;
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cx(), target);
  }

  // required float cy = 4;
  if (has_cy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cy(), target);
  }

  // repeated float distortions = 5 [packed = true];
  if (this->distortions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _distortions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->distortions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->distortions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraIntrinsic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float fx = 1;
    if (has_fx()) {
      total_size += 1 + 4;
    }

    // required float fy = 2;
    if (has_fy()) {
      total_size += 1 + 4;
    }

    // required float cx = 3;
    if (has_cx()) {
      total_size += 1 + 4;
    }

    // required float cy = 4;
    if (has_cy()) {
      total_size += 1 + 4;
    }

  }
  // repeated float distortions = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->distortions_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _distortions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraIntrinsic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraIntrinsic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraIntrinsic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraIntrinsic::MergeFrom(const CameraIntrinsic& from) {
  GOOGLE_CHECK_NE(&from, this);
  distortions_.MergeFrom(from.distortions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fx()) {
      set_fx(from.fx());
    }
    if (from.has_fy()) {
      set_fy(from.fy());
    }
    if (from.has_cx()) {
      set_cx(from.cx());
    }
    if (from.has_cy()) {
      set_cy(from.cy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraIntrinsic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraIntrinsic::CopyFrom(const CameraIntrinsic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraIntrinsic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CameraIntrinsic::Swap(CameraIntrinsic* other) {
  if (other != this) {
    std::swap(fx_, other->fx_);
    std::swap(fy_, other->fy_);
    std::swap(cx_, other->cx_);
    std::swap(cy_, other->cy_);
    distortions_.Swap(&other->distortions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraIntrinsic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraIntrinsic_descriptor_;
  metadata.reflection = CameraIntrinsic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectorConfig::kMatchThresholdFieldNumber;
const int DetectorConfig::kStepsEachPyramidFieldNumber;
#endif  // !_MSC_VER

DetectorConfig::DetectorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetectorConfig::InitAsDefaultInstance() {
}

DetectorConfig::DetectorConfig(const DetectorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetectorConfig::SharedCtor() {
  _cached_size_ = 0;
  match_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorConfig::~DetectorConfig() {
  SharedDtor();
}

void DetectorConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorConfig_descriptor_;
}

const DetectorConfig& DetectorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

DetectorConfig* DetectorConfig::default_instance_ = NULL;

DetectorConfig* DetectorConfig::New() const {
  return new DetectorConfig;
}

void DetectorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_threshold_ = 0;
  }
  steps_each_pyramid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float match_threshold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_threshold_)));
          set_has_match_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps_each_pyramid;
        break;
      }

      // repeated float steps_each_pyramid = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steps_each_pyramid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_steps_each_pyramid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_steps_each_pyramid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetectorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float match_threshold = 1;
  if (has_match_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->match_threshold(), output);
  }

  // repeated float steps_each_pyramid = 2 [packed = true];
  if (this->steps_each_pyramid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_steps_each_pyramid_cached_byte_size_);
  }
  for (int i = 0; i < this->steps_each_pyramid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->steps_each_pyramid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetectorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float match_threshold = 1;
  if (has_match_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->match_threshold(), target);
  }

  // repeated float steps_each_pyramid = 2 [packed = true];
  if (this->steps_each_pyramid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _steps_each_pyramid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->steps_each_pyramid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->steps_each_pyramid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetectorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float match_threshold = 1;
    if (has_match_threshold()) {
      total_size += 1 + 4;
    }

  }
  // repeated float steps_each_pyramid = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->steps_each_pyramid_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _steps_each_pyramid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorConfig::MergeFrom(const DetectorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_each_pyramid_.MergeFrom(from.steps_each_pyramid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_threshold()) {
      set_match_threshold(from.match_threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorConfig::CopyFrom(const DetectorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DetectorConfig::Swap(DetectorConfig* other) {
  if (other != this) {
    std::swap(match_threshold_, other->match_threshold_);
    steps_each_pyramid_.Swap(&other->steps_each_pyramid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorConfig_descriptor_;
  metadata.reflection = DetectorConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rl2d

// @@protoc_insertion_point(global_scope)
