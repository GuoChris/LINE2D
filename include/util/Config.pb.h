// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

#ifndef PROTOBUF_Config_2eproto__INCLUDED
#define PROTOBUF_Config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rl2d {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Config_2eproto();
void protobuf_AssignDesc_Config_2eproto();
void protobuf_ShutdownFile_Config_2eproto();

class ObjectConfig;
class ObjectConfig_RGB;
class ObjectsConfig;

// ===================================================================

class ObjectConfig_RGB : public ::google::protobuf::Message {
 public:
  ObjectConfig_RGB();
  virtual ~ObjectConfig_RGB();

  ObjectConfig_RGB(const ObjectConfig_RGB& from);

  inline ObjectConfig_RGB& operator=(const ObjectConfig_RGB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectConfig_RGB& default_instance();

  void Swap(ObjectConfig_RGB* other);

  // implements Message ----------------------------------------------

  ObjectConfig_RGB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectConfig_RGB& from);
  void MergeFrom(const ObjectConfig_RGB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 R = 1 [default = 255];
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);

  // optional int32 G = 2 [default = 0];
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);

  // optional int32 B = 3 [default = 0];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rl2d.ObjectConfig.RGB)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Config_2eproto();
  friend void protobuf_AssignDesc_Config_2eproto();
  friend void protobuf_ShutdownFile_Config_2eproto();

  void InitAsDefaultInstance();
  static ObjectConfig_RGB* default_instance_;
};
// -------------------------------------------------------------------

class ObjectConfig : public ::google::protobuf::Message {
 public:
  ObjectConfig();
  virtual ~ObjectConfig();

  ObjectConfig(const ObjectConfig& from);

  inline ObjectConfig& operator=(const ObjectConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectConfig& default_instance();

  void Swap(ObjectConfig* other);

  // implements Message ----------------------------------------------

  ObjectConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectConfig& from);
  void MergeFrom(const ObjectConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ObjectConfig_RGB RGB;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string img_dir = 3;
  inline bool has_img_dir() const;
  inline void clear_img_dir();
  static const int kImgDirFieldNumber = 3;
  inline const ::std::string& img_dir() const;
  inline void set_img_dir(const ::std::string& value);
  inline void set_img_dir(const char* value);
  inline void set_img_dir(const char* value, size_t size);
  inline ::std::string* mutable_img_dir();
  inline ::std::string* release_img_dir();
  inline void set_allocated_img_dir(::std::string* img_dir);

  // optional string pose_path = 4;
  inline bool has_pose_path() const;
  inline void clear_pose_path();
  static const int kPosePathFieldNumber = 4;
  inline const ::std::string& pose_path() const;
  inline void set_pose_path(const ::std::string& value);
  inline void set_pose_path(const char* value);
  inline void set_pose_path(const char* value, size_t size);
  inline ::std::string* mutable_pose_path();
  inline ::std::string* release_pose_path();
  inline void set_allocated_pose_path(::std::string* pose_path);

  // optional string model_path = 5;
  inline bool has_model_path() const;
  inline void clear_model_path();
  static const int kModelPathFieldNumber = 5;
  inline const ::std::string& model_path() const;
  inline void set_model_path(const ::std::string& value);
  inline void set_model_path(const char* value);
  inline void set_model_path(const char* value, size_t size);
  inline ::std::string* mutable_model_path();
  inline ::std::string* release_model_path();
  inline void set_allocated_model_path(::std::string* model_path);

  // optional .rl2d.ObjectConfig.RGB bounding_box_color = 6;
  inline bool has_bounding_box_color() const;
  inline void clear_bounding_box_color();
  static const int kBoundingBoxColorFieldNumber = 6;
  inline const ::rl2d::ObjectConfig_RGB& bounding_box_color() const;
  inline ::rl2d::ObjectConfig_RGB* mutable_bounding_box_color();
  inline ::rl2d::ObjectConfig_RGB* release_bounding_box_color();
  inline void set_allocated_bounding_box_color(::rl2d::ObjectConfig_RGB* bounding_box_color);

  // @@protoc_insertion_point(class_scope:rl2d.ObjectConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_img_dir();
  inline void clear_has_img_dir();
  inline void set_has_pose_path();
  inline void clear_has_pose_path();
  inline void set_has_model_path();
  inline void clear_has_model_path();
  inline void set_has_bounding_box_color();
  inline void clear_has_bounding_box_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* img_dir_;
  ::std::string* pose_path_;
  ::std::string* model_path_;
  ::rl2d::ObjectConfig_RGB* bounding_box_color_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Config_2eproto();
  friend void protobuf_AssignDesc_Config_2eproto();
  friend void protobuf_ShutdownFile_Config_2eproto();

  void InitAsDefaultInstance();
  static ObjectConfig* default_instance_;
};
// -------------------------------------------------------------------

class ObjectsConfig : public ::google::protobuf::Message {
 public:
  ObjectsConfig();
  virtual ~ObjectsConfig();

  ObjectsConfig(const ObjectsConfig& from);

  inline ObjectsConfig& operator=(const ObjectsConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectsConfig& default_instance();

  void Swap(ObjectsConfig* other);

  // implements Message ----------------------------------------------

  ObjectsConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectsConfig& from);
  void MergeFrom(const ObjectsConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rl2d.ObjectConfig object_config = 1;
  inline int object_config_size() const;
  inline void clear_object_config();
  static const int kObjectConfigFieldNumber = 1;
  inline const ::rl2d::ObjectConfig& object_config(int index) const;
  inline ::rl2d::ObjectConfig* mutable_object_config(int index);
  inline ::rl2d::ObjectConfig* add_object_config();
  inline const ::google::protobuf::RepeatedPtrField< ::rl2d::ObjectConfig >&
      object_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::rl2d::ObjectConfig >*
      mutable_object_config();

  // @@protoc_insertion_point(class_scope:rl2d.ObjectsConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rl2d::ObjectConfig > object_config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Config_2eproto();
  friend void protobuf_AssignDesc_Config_2eproto();
  friend void protobuf_ShutdownFile_Config_2eproto();

  void InitAsDefaultInstance();
  static ObjectsConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ObjectConfig_RGB

// optional int32 R = 1 [default = 255];
inline bool ObjectConfig_RGB::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectConfig_RGB::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectConfig_RGB::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectConfig_RGB::clear_r() {
  r_ = 255;
  clear_has_r();
}
inline ::google::protobuf::int32 ObjectConfig_RGB::r() const {
  return r_;
}
inline void ObjectConfig_RGB::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
}

// optional int32 G = 2 [default = 0];
inline bool ObjectConfig_RGB::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectConfig_RGB::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectConfig_RGB::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectConfig_RGB::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 ObjectConfig_RGB::g() const {
  return g_;
}
inline void ObjectConfig_RGB::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
}

// optional int32 B = 3 [default = 0];
inline bool ObjectConfig_RGB::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectConfig_RGB::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectConfig_RGB::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectConfig_RGB::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 ObjectConfig_RGB::b() const {
  return b_;
}
inline void ObjectConfig_RGB::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// ObjectConfig

// required int32 id = 1;
inline bool ObjectConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ObjectConfig::id() const {
  return id_;
}
inline void ObjectConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool ObjectConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ObjectConfig::name() const {
  return *name_;
}
inline void ObjectConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjectConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjectConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjectConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ObjectConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjectConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string img_dir = 3;
inline bool ObjectConfig::has_img_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectConfig::set_has_img_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectConfig::clear_has_img_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectConfig::clear_img_dir() {
  if (img_dir_ != &::google::protobuf::internal::kEmptyString) {
    img_dir_->clear();
  }
  clear_has_img_dir();
}
inline const ::std::string& ObjectConfig::img_dir() const {
  return *img_dir_;
}
inline void ObjectConfig::set_img_dir(const ::std::string& value) {
  set_has_img_dir();
  if (img_dir_ == &::google::protobuf::internal::kEmptyString) {
    img_dir_ = new ::std::string;
  }
  img_dir_->assign(value);
}
inline void ObjectConfig::set_img_dir(const char* value) {
  set_has_img_dir();
  if (img_dir_ == &::google::protobuf::internal::kEmptyString) {
    img_dir_ = new ::std::string;
  }
  img_dir_->assign(value);
}
inline void ObjectConfig::set_img_dir(const char* value, size_t size) {
  set_has_img_dir();
  if (img_dir_ == &::google::protobuf::internal::kEmptyString) {
    img_dir_ = new ::std::string;
  }
  img_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjectConfig::mutable_img_dir() {
  set_has_img_dir();
  if (img_dir_ == &::google::protobuf::internal::kEmptyString) {
    img_dir_ = new ::std::string;
  }
  return img_dir_;
}
inline ::std::string* ObjectConfig::release_img_dir() {
  clear_has_img_dir();
  if (img_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = img_dir_;
    img_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjectConfig::set_allocated_img_dir(::std::string* img_dir) {
  if (img_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete img_dir_;
  }
  if (img_dir) {
    set_has_img_dir();
    img_dir_ = img_dir;
  } else {
    clear_has_img_dir();
    img_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pose_path = 4;
inline bool ObjectConfig::has_pose_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectConfig::set_has_pose_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectConfig::clear_has_pose_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectConfig::clear_pose_path() {
  if (pose_path_ != &::google::protobuf::internal::kEmptyString) {
    pose_path_->clear();
  }
  clear_has_pose_path();
}
inline const ::std::string& ObjectConfig::pose_path() const {
  return *pose_path_;
}
inline void ObjectConfig::set_pose_path(const ::std::string& value) {
  set_has_pose_path();
  if (pose_path_ == &::google::protobuf::internal::kEmptyString) {
    pose_path_ = new ::std::string;
  }
  pose_path_->assign(value);
}
inline void ObjectConfig::set_pose_path(const char* value) {
  set_has_pose_path();
  if (pose_path_ == &::google::protobuf::internal::kEmptyString) {
    pose_path_ = new ::std::string;
  }
  pose_path_->assign(value);
}
inline void ObjectConfig::set_pose_path(const char* value, size_t size) {
  set_has_pose_path();
  if (pose_path_ == &::google::protobuf::internal::kEmptyString) {
    pose_path_ = new ::std::string;
  }
  pose_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjectConfig::mutable_pose_path() {
  set_has_pose_path();
  if (pose_path_ == &::google::protobuf::internal::kEmptyString) {
    pose_path_ = new ::std::string;
  }
  return pose_path_;
}
inline ::std::string* ObjectConfig::release_pose_path() {
  clear_has_pose_path();
  if (pose_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pose_path_;
    pose_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjectConfig::set_allocated_pose_path(::std::string* pose_path) {
  if (pose_path_ != &::google::protobuf::internal::kEmptyString) {
    delete pose_path_;
  }
  if (pose_path) {
    set_has_pose_path();
    pose_path_ = pose_path;
  } else {
    clear_has_pose_path();
    pose_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model_path = 5;
inline bool ObjectConfig::has_model_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectConfig::set_has_model_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectConfig::clear_has_model_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectConfig::clear_model_path() {
  if (model_path_ != &::google::protobuf::internal::kEmptyString) {
    model_path_->clear();
  }
  clear_has_model_path();
}
inline const ::std::string& ObjectConfig::model_path() const {
  return *model_path_;
}
inline void ObjectConfig::set_model_path(const ::std::string& value) {
  set_has_model_path();
  if (model_path_ == &::google::protobuf::internal::kEmptyString) {
    model_path_ = new ::std::string;
  }
  model_path_->assign(value);
}
inline void ObjectConfig::set_model_path(const char* value) {
  set_has_model_path();
  if (model_path_ == &::google::protobuf::internal::kEmptyString) {
    model_path_ = new ::std::string;
  }
  model_path_->assign(value);
}
inline void ObjectConfig::set_model_path(const char* value, size_t size) {
  set_has_model_path();
  if (model_path_ == &::google::protobuf::internal::kEmptyString) {
    model_path_ = new ::std::string;
  }
  model_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjectConfig::mutable_model_path() {
  set_has_model_path();
  if (model_path_ == &::google::protobuf::internal::kEmptyString) {
    model_path_ = new ::std::string;
  }
  return model_path_;
}
inline ::std::string* ObjectConfig::release_model_path() {
  clear_has_model_path();
  if (model_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_path_;
    model_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjectConfig::set_allocated_model_path(::std::string* model_path) {
  if (model_path_ != &::google::protobuf::internal::kEmptyString) {
    delete model_path_;
  }
  if (model_path) {
    set_has_model_path();
    model_path_ = model_path;
  } else {
    clear_has_model_path();
    model_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rl2d.ObjectConfig.RGB bounding_box_color = 6;
inline bool ObjectConfig::has_bounding_box_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectConfig::set_has_bounding_box_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectConfig::clear_has_bounding_box_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectConfig::clear_bounding_box_color() {
  if (bounding_box_color_ != NULL) bounding_box_color_->::rl2d::ObjectConfig_RGB::Clear();
  clear_has_bounding_box_color();
}
inline const ::rl2d::ObjectConfig_RGB& ObjectConfig::bounding_box_color() const {
  return bounding_box_color_ != NULL ? *bounding_box_color_ : *default_instance_->bounding_box_color_;
}
inline ::rl2d::ObjectConfig_RGB* ObjectConfig::mutable_bounding_box_color() {
  set_has_bounding_box_color();
  if (bounding_box_color_ == NULL) bounding_box_color_ = new ::rl2d::ObjectConfig_RGB;
  return bounding_box_color_;
}
inline ::rl2d::ObjectConfig_RGB* ObjectConfig::release_bounding_box_color() {
  clear_has_bounding_box_color();
  ::rl2d::ObjectConfig_RGB* temp = bounding_box_color_;
  bounding_box_color_ = NULL;
  return temp;
}
inline void ObjectConfig::set_allocated_bounding_box_color(::rl2d::ObjectConfig_RGB* bounding_box_color) {
  delete bounding_box_color_;
  bounding_box_color_ = bounding_box_color;
  if (bounding_box_color) {
    set_has_bounding_box_color();
  } else {
    clear_has_bounding_box_color();
  }
}

// -------------------------------------------------------------------

// ObjectsConfig

// repeated .rl2d.ObjectConfig object_config = 1;
inline int ObjectsConfig::object_config_size() const {
  return object_config_.size();
}
inline void ObjectsConfig::clear_object_config() {
  object_config_.Clear();
}
inline const ::rl2d::ObjectConfig& ObjectsConfig::object_config(int index) const {
  return object_config_.Get(index);
}
inline ::rl2d::ObjectConfig* ObjectsConfig::mutable_object_config(int index) {
  return object_config_.Mutable(index);
}
inline ::rl2d::ObjectConfig* ObjectsConfig::add_object_config() {
  return object_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rl2d::ObjectConfig >&
ObjectsConfig::object_config() const {
  return object_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::rl2d::ObjectConfig >*
ObjectsConfig::mutable_object_config() {
  return &object_config_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rl2d

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Config_2eproto__INCLUDED
