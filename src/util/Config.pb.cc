// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "..\..\include\util\Config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rl2d {

namespace {

const ::google::protobuf::Descriptor* ObjectConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectConfig_RGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfig_RGB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectsConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectsConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Config_2eproto() {
  protobuf_AddDesc_Config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Config.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectConfig_descriptor_ = file->message_type(0);
  static const int ObjectConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, img_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, pose_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, model_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, bounding_box_color_),
  };
  ObjectConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfig_descriptor_,
      ObjectConfig::default_instance_,
      ObjectConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfig));
  ObjectConfig_RGB_descriptor_ = ObjectConfig_descriptor_->nested_type(0);
  static const int ObjectConfig_RGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, b_),
  };
  ObjectConfig_RGB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfig_RGB_descriptor_,
      ObjectConfig_RGB::default_instance_,
      ObjectConfig_RGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfig_RGB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfig_RGB));
  ObjectsConfig_descriptor_ = file->message_type(1);
  static const int ObjectsConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectsConfig, object_config_),
  };
  ObjectsConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectsConfig_descriptor_,
      ObjectsConfig::default_instance_,
      ObjectsConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectsConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectsConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectsConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfig_descriptor_, &ObjectConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfig_RGB_descriptor_, &ObjectConfig_RGB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectsConfig_descriptor_, &ObjectsConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Config_2eproto() {
  delete ObjectConfig::default_instance_;
  delete ObjectConfig_reflection_;
  delete ObjectConfig_RGB::default_instance_;
  delete ObjectConfig_RGB_reflection_;
  delete ObjectsConfig::default_instance_;
  delete ObjectsConfig_reflection_;
}

void protobuf_AddDesc_Config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Config.proto\022\004rl2d\"\307\001\n\014ObjectConfig\022\n\n"
    "\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\017\n\007img_dir\030\003 \002(\t"
    "\022\021\n\tpose_path\030\004 \001(\t\022\022\n\nmodel_path\030\005 \001(\t\022"
    "2\n\022bounding_box_color\030\006 \001(\0132\026.rl2d.Objec"
    "tConfig.RGB\0321\n\003RGB\022\016\n\001R\030\001 \001(\005:\003255\022\014\n\001G\030"
    "\002 \001(\005:\0010\022\014\n\001B\030\003 \001(\005:\0010\":\n\rObjectsConfig\022"
    ")\n\robject_config\030\001 \003(\0132\022.rl2d.ObjectConf"
    "ig", 282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Config.proto", &protobuf_RegisterTypes);
  ObjectConfig::default_instance_ = new ObjectConfig();
  ObjectConfig_RGB::default_instance_ = new ObjectConfig_RGB();
  ObjectsConfig::default_instance_ = new ObjectsConfig();
  ObjectConfig::default_instance_->InitAsDefaultInstance();
  ObjectConfig_RGB::default_instance_->InitAsDefaultInstance();
  ObjectsConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Config_2eproto {
  StaticDescriptorInitializer_Config_2eproto() {
    protobuf_AddDesc_Config_2eproto();
  }
} static_descriptor_initializer_Config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ObjectConfig_RGB::kRFieldNumber;
const int ObjectConfig_RGB::kGFieldNumber;
const int ObjectConfig_RGB::kBFieldNumber;
#endif  // !_MSC_VER

ObjectConfig_RGB::ObjectConfig_RGB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectConfig_RGB::InitAsDefaultInstance() {
}

ObjectConfig_RGB::ObjectConfig_RGB(const ObjectConfig_RGB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectConfig_RGB::SharedCtor() {
  _cached_size_ = 0;
  r_ = 255;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfig_RGB::~ObjectConfig_RGB() {
  SharedDtor();
}

void ObjectConfig_RGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectConfig_RGB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfig_RGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfig_RGB_descriptor_;
}

const ObjectConfig_RGB& ObjectConfig_RGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectConfig_RGB* ObjectConfig_RGB::default_instance_ = NULL;

ObjectConfig_RGB* ObjectConfig_RGB::New() const {
  return new ObjectConfig_RGB;
}

void ObjectConfig_RGB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 255;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfig_RGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 R = 1 [default = 255];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_G;
        break;
      }

      // optional int32 G = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_B;
        break;
      }

      // optional int32 B = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectConfig_RGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 R = 1 [default = 255];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 G = 2 [default = 0];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 B = 3 [default = 0];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectConfig_RGB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 R = 1 [default = 255];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // optional int32 G = 2 [default = 0];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // optional int32 B = 3 [default = 0];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectConfig_RGB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 R = 1 [default = 255];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 G = 2 [default = 0];
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // optional int32 B = 3 [default = 0];
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfig_RGB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfig_RGB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfig_RGB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfig_RGB::MergeFrom(const ObjectConfig_RGB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfig_RGB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfig_RGB::CopyFrom(const ObjectConfig_RGB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfig_RGB::IsInitialized() const {

  return true;
}

void ObjectConfig_RGB::Swap(ObjectConfig_RGB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfig_RGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfig_RGB_descriptor_;
  metadata.reflection = ObjectConfig_RGB_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ObjectConfig::kIdFieldNumber;
const int ObjectConfig::kNameFieldNumber;
const int ObjectConfig::kImgDirFieldNumber;
const int ObjectConfig::kPosePathFieldNumber;
const int ObjectConfig::kModelPathFieldNumber;
const int ObjectConfig::kBoundingBoxColorFieldNumber;
#endif  // !_MSC_VER

ObjectConfig::ObjectConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectConfig::InitAsDefaultInstance() {
  bounding_box_color_ = const_cast< ::rl2d::ObjectConfig_RGB*>(&::rl2d::ObjectConfig_RGB::default_instance());
}

ObjectConfig::ObjectConfig(const ObjectConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  img_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pose_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bounding_box_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfig::~ObjectConfig() {
  SharedDtor();
}

void ObjectConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (img_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete img_dir_;
  }
  if (pose_path_ != &::google::protobuf::internal::kEmptyString) {
    delete pose_path_;
  }
  if (model_path_ != &::google::protobuf::internal::kEmptyString) {
    delete model_path_;
  }
  if (this != default_instance_) {
    delete bounding_box_color_;
  }
}

void ObjectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfig_descriptor_;
}

const ObjectConfig& ObjectConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectConfig* ObjectConfig::default_instance_ = NULL;

ObjectConfig* ObjectConfig::New() const {
  return new ObjectConfig;
}

void ObjectConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_img_dir()) {
      if (img_dir_ != &::google::protobuf::internal::kEmptyString) {
        img_dir_->clear();
      }
    }
    if (has_pose_path()) {
      if (pose_path_ != &::google::protobuf::internal::kEmptyString) {
        pose_path_->clear();
      }
    }
    if (has_model_path()) {
      if (model_path_ != &::google::protobuf::internal::kEmptyString) {
        model_path_->clear();
      }
    }
    if (has_bounding_box_color()) {
      if (bounding_box_color_ != NULL) bounding_box_color_->::rl2d::ObjectConfig_RGB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_img_dir;
        break;
      }

      // required string img_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_dir().data(), this->img_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pose_path;
        break;
      }

      // optional string pose_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pose_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pose_path().data(), this->pose_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model_path;
        break;
      }

      // optional string model_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_path().data(), this->model_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bounding_box_color;
        break;
      }

      // optional .rl2d.ObjectConfig.RGB bounding_box_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounding_box_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string img_dir = 3;
  if (has_img_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_dir().data(), this->img_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->img_dir(), output);
  }

  // optional string pose_path = 4;
  if (has_pose_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pose_path().data(), this->pose_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pose_path(), output);
  }

  // optional string model_path = 5;
  if (has_model_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->model_path(), output);
  }

  // optional .rl2d.ObjectConfig.RGB bounding_box_color = 6;
  if (has_bounding_box_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bounding_box_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string img_dir = 3;
  if (has_img_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_dir().data(), this->img_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->img_dir(), target);
  }

  // optional string pose_path = 4;
  if (has_pose_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pose_path().data(), this->pose_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pose_path(), target);
  }

  // optional string model_path = 5;
  if (has_model_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_path().data(), this->model_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model_path(), target);
  }

  // optional .rl2d.ObjectConfig.RGB bounding_box_color = 6;
  if (has_bounding_box_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bounding_box_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string img_dir = 3;
    if (has_img_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_dir());
    }

    // optional string pose_path = 4;
    if (has_pose_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pose_path());
    }

    // optional string model_path = 5;
    if (has_model_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_path());
    }

    // optional .rl2d.ObjectConfig.RGB bounding_box_color = 6;
    if (has_bounding_box_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_box_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfig::MergeFrom(const ObjectConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_img_dir()) {
      set_img_dir(from.img_dir());
    }
    if (from.has_pose_path()) {
      set_pose_path(from.pose_path());
    }
    if (from.has_model_path()) {
      set_model_path(from.model_path());
    }
    if (from.has_bounding_box_color()) {
      mutable_bounding_box_color()->::rl2d::ObjectConfig_RGB::MergeFrom(from.bounding_box_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfig::CopyFrom(const ObjectConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ObjectConfig::Swap(ObjectConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(img_dir_, other->img_dir_);
    std::swap(pose_path_, other->pose_path_);
    std::swap(model_path_, other->model_path_);
    std::swap(bounding_box_color_, other->bounding_box_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfig_descriptor_;
  metadata.reflection = ObjectConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectsConfig::kObjectConfigFieldNumber;
#endif  // !_MSC_VER

ObjectsConfig::ObjectsConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectsConfig::InitAsDefaultInstance() {
}

ObjectsConfig::ObjectsConfig(const ObjectsConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectsConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectsConfig::~ObjectsConfig() {
  SharedDtor();
}

void ObjectsConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectsConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectsConfig_descriptor_;
}

const ObjectsConfig& ObjectsConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Config_2eproto();
  return *default_instance_;
}

ObjectsConfig* ObjectsConfig::default_instance_ = NULL;

ObjectsConfig* ObjectsConfig::New() const {
  return new ObjectsConfig;
}

void ObjectsConfig::Clear() {
  object_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rl2d.ObjectConfig object_config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object_config;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rl2d.ObjectConfig object_config = 1;
  for (int i = 0; i < this->object_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_config(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectsConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rl2d.ObjectConfig object_config = 1;
  for (int i = 0; i < this->object_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_config(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectsConfig::ByteSize() const {
  int total_size = 0;

  // repeated .rl2d.ObjectConfig object_config = 1;
  total_size += 1 * this->object_config_size();
  for (int i = 0; i < this->object_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_config(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectsConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectsConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectsConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectsConfig::MergeFrom(const ObjectsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_config_.MergeFrom(from.object_config_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectsConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectsConfig::CopyFrom(const ObjectsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectsConfig::IsInitialized() const {

  for (int i = 0; i < object_config_size(); i++) {
    if (!this->object_config(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectsConfig::Swap(ObjectsConfig* other) {
  if (other != this) {
    object_config_.Swap(&other->object_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectsConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectsConfig_descriptor_;
  metadata.reflection = ObjectsConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rl2d